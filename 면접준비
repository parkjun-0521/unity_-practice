- Unity 관련 기술면접 키워드 및 면접 답변 

- 유니티에서의 코루틴이 무엇인가? 

코루틴을 사용하면 작업을 다수의 프레임에 분산할 수 있습니다. 
유니티에서 코루틴은 실행을 일시 정지하고 제어를 유니티에 반환하지만 
중단한 부분에서 다음 프레임을 계속할 수 있는 메서드 입니다. 

내가 아는 코루틴 
일반적인적으로 코드가 실행되고 있을 때 중간에 기능에 관련된 메소드를 만나면 실행 제어권이 
메소드로 이전되게 됩니다. 이후에 기능관련 메소드가 다 실행이 되고 나면 제어권을 반납하여 
다시 코드가 실행이되는 반면 
코루틴은 제어권을 가지게 되만 코드는 계속 실행이 되면서 독립적을 따로 실행되는 메소드 입니다. 
일반적인 메소드와 동일하게 제어권을 가지고 있지만 독립적으로 실행이 되기 때문에 
여러 작업을 동시에 처리할 수 있습니다. 


- GC ( Garbage Collection ) 이 무엇인가 

오브젝트나 문자열, 배열을 생성 및 저장하려면 Heap 메모리 공간이 필요하다. 
프로그래머가 명시적으로 힙 메모리를 할당하고 회수하는 등 직접 관리를 해야하지만 
유니티에서는 Unity Mono 엔진과 같은 런타임 시스템이 자동으로 메모리 관리를 수행한다. 

미사용 메모리를 파악하고 해제하는 프로세스 

어떤 힙 블록이 더 이상 사용되지 않고 있는지를 확인하기 위해, 
메모리 관리자는 현재 모든 액티브 참조 변수를 검색하고, 
이 변수가 참조하는 블록을 'live' 이라고 표시한다. 
검색이 끝나면 메모리 관리자는 살아 있는 블록 사이의 모든 공간을 비었다고 간주하며 
다음 할당 요청 시 사용할 수 있다고 간주한다. 


- 디자인 패턴 ( https://thepathfinder.co.kr/entry/TIL%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EA%B3%BC-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%810704 )

반복적으로 일어나는 문제에 대해 재사용이 가능한 코드 형태로 작성하는 방식 
명령 패턴 : 요청 자체를 캡슐화하는 방식으로 서로 다른 클라이언트를 매개변수로 만들고
	  요청을 대기시키거나 로깅하며, 되돌릴 수 있는 연산을 지원 

싱글톤 패턴 : 해당 클래스의 인스턴스가 하나만 생성되는 것을 보장하며, 그 인스턴스 접근 가능하도록 만드는 패턴 
	     게임 개발에서의 전체적인 누적 데이터를 관리하는데 사용된다.

FSM 패턴 : 이벤트 발생 시 하나 씩 처리해 현재 상태에서 다음 상태로 전이하게 하는 디자인 패턴 
	  특정 객체의 상태를 관리하기 위한 패턴 

	  리팩토링 : 다른 사람이 짠 코드를 나만의 코드 스타일로 전체 코드를 재구조화 하는 것을 말함 

	  유니티에서 FSM 패턴이란 Animator를 말한다. 한 State에 머무르며 행동하고 다른 
	  State로 전이하며 행동을 변경하는 시스템
	
- 유니티 함수들 실행 순서 
	- Awake
	- OnEnable() 
	- Start

	- Fixedupdate

- 유니티 외적 / 내적 
	- 내적 : 내적은 A * b = |A| * |B| * conX 
		A 벡더와 B 벡터의 크기에 코사인 값을 곱한것, 첫 벡터 사이의 각도를 구할 수 있다. 
		- 물체의 앞뒤 판별 
		  - 내적을 이용해서 물체가 앞에 있는지, 뒤에 있는지 판별할 수 있다. 
		  - 플레이어 시선 ( forward )를 중심으로 좌, 우 90도가 넘어가는 순간 코사인 값은 음수를 가지기 때문에,
		  - 플레이어 시선의 벡터와 target의 위치 벡터를 내적해서 양수 값이면 플레이어 정면,
		  - 음수 값이면 플레이어 후면에 존재한다고 할 수있다. 

		- 시야각 내에 물체 판별 
		  - 내적을 이용해서 특정 오브젝트가 플레이어의 시야각 내에 위치하는지 여부를 판별할 수 있다. 
		  - 플레이어 시야각을 X라고 할 때, 플레이어의 시선과 오브젝트의 위치벡터를 내적해서 얻는 각도가 
		  - X/2 보다 크면 시야 내부에 위치한다는 뜻이고, 그 반대인 경우 오브젝트가 시야 내에 없다는 뜻 

		- 내적은 좌, 우를 구분하지 않는다. 
		- 왼쪽이던 오른쪽이던 같은 각도라면 같은 값을 반환해낸다.

	- 외적 : 보통 좌, 우를 판별할 때 많이 사용된다. 
		- 외적은 벡터값이므로 방향성을 갖는다.
		- 인자의 순서가 반대일 경우 같은 절대값의 반대부호를 가진 값을 반환 
		- 외적은 보통 오브젝트가 왼쪽에 있는지, 오른쪽에 있는 판별하는데 사용된다. 
		- 플레이어의 시선과 Up벡터를 중심으로 외적을 구한다면 플레이어의 왼쪽에 있는 오브젝트는 양수 
		- 플레이어의 오른쪽에 있는 오브젝트는 음수를 반환한다. 
	
- 오브젝트 풀

- A* 알고리즘 

- 
