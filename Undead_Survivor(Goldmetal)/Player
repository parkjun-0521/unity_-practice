using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
public class Player : MonoBehaviour
{
    public Vector2 inputVec;        // 이동 키을 받는 변수 
    public float speed;             // 이동 속도 변수 
    Rigidbody2D rigid;              // 이동 변수 

    public Scanner scanner;         // 검색클래스 타입 ( Scanner 스크립트를 가져오기 위한 방법 (다른 스크립트에서 사용하기 위해서)) 

    public Hand[] hands;            // Hand 스크립트를 담을 배열 변수 선언 

    public RuntimeAnimatorController[] animCon;     // 여러 애니메이터 컨트롤러를 저장할 배열 변수 선언 

    // 게임 오브젝트 없이 오브젝트의 속성을 사용하는 법
    SpriteRenderer spriter;         // 스프라이트 컴포넌트 ( 캐릭터의 방향 전환을 위해 ) 
    Animator anime;                // 애니메이션 컴포넌트

    void Awake()
    {
        // 변수 초기화 
        rigid = GetComponent<Rigidbody2D>();                // Rigidbody2D 초기화 
        spriter = GetComponent<SpriteRenderer>();           // SpriteRenderer 초기화 
        anime = GetComponent<Animator>();                   // Animator 초기화 
        scanner = GetComponent<Scanner>();                  // Scanner 초기화 

        // 비활성화 된 오브젝트는 GetComponent에서 제외된다. 
        // 이것을 해결하기 위해서 (true) 로 설정한다. 
        // 이렇게 되면 비활성화 된 오브젝트로 초기화가 가능하다. 
        hands = GetComponentsInChildren<Hand>(true);        // Hand 초기화 ( 자식의 오브젝트에서 가져온다 ) 
    }

    void OnEnable()
    {
        // Character 스크립트에서 만든 속성을 활용 
        // 기본 이동속도에 캐릭터 ID에 맞는 이동속도를 곱하여 
        // 캐릭터가 처음 생성되었을 때의 이동속도를 변화시킨다. 
        speed *= Character.Speed;

        // 여러 애니메이터 컨트롤러중에서 내가 선택한 캐릭터의 ID 값을 가져와 
        // 그 ID 와 맞는 애니메이션 컨트롤러를 동작시킨다. 
        anime.runtimeAnimatorController = animCon[GameManager.instance.playerId];
    }

    // 물리이동 함수 
    void FixedUpdate()  
    {
        // 캐릭터가 죽거나, 게임 시간이 정지하였을 때 캐릭터의 움직임을 제한하기 위해서 
        // isLive가 false이면 return
        if (!GameManager.instance.isLive)
            return;

        // 캐릭터가 다음으로 이동할 위치 
        // normalized : 단위백터 ( 모든 백터값을 1로 고정 (대각선의 속도는 피타고라스의 정리에 의해 속도가 빠르다.)) 
        // 다음으로 이동할 위치 * 이동 속도 * 프레임 
        // Time.DeltaTime : 어느 컴퓨터에서도 같은 속도로 맞춰주기 위해 프레임 즉, 게임 시간을 맞춘다. 
        Vector2 nextVec = inputVec.normalized * speed * Time.fixedDeltaTime;        

        // 위치 이동 로직 
        // MovePosition은 위치 이동이라 현재 위치도 더해주어야 한다. 
        // 현재 위치에 다음 위치를 더해주니깐 다음으로 나아갈 위치를 말한다. 
        // rigid.position : RigidBody의 위치를 말한다. 
        rigid.MovePosition(rigid.position + nextVec);                    // 플레이어 위치에서 1을 더한거나 뺀값으로 이동하는 방식 ( 위치 이동 )
    }

    void Update()
    {
        // 캐릭터가 죽거나, 게임 시간이 정지하였을 때 캐릭터의 움직임을 제한하기 위해서 
        // isLive가 false이면 return
        if (!GameManager.instance.isLive)
            return;

        // 기본적인 캐릭터 이동 값 반환
        // GetAxisRaw 는 왼쪽키 -1, 오른쪽키 1 을 의미한다. 
        // Input Manager 에서 Horizontal, Vertical 를 지정해줄 수 있다. 
        // 단점이라면 내가 키 변경 설정을 만들고 싶을 때 사용하지 못한다는 단점이 있다. 
        // Input System 패키지를 받아서 새로운 이동키를 만들 수 있다. 
        inputVec.x = Input.GetAxisRaw("Horizontal");
        inputVec.y = Input.GetAxisRaw("Vertical");
    }

    // 새로운 input 이동 방식 
    //void OnMove(InputValue value)
    //{
    //    // normalized 가 자동으로 지정되어 있음 
    //    inputVec = value.Get<Vector2>();        // Get<T> : 프로필에서 설정한 컨트롤 타입 T 값을 가져오는 함수 
    //}

    void LateUpdate()
    {
        // 캐릭터가 죽거나, 게임 시간이 정지하였을 때 캐릭터의 움직임을 제한하기 위해서 
        // isLive가 false이면 return
        if (!GameManager.instance.isLive)
            return;

        // 애니메이션 적용 
        // 순수 백터 값만 가져와서 Float 값을 변경 
        // magnitude : 벡터의 크기만 가져온다. 
        // 이동을 했을 때 크기만 가져와서 Float 값을 변경해주고 그 값이 0.01 보다 크면 Run 애니메이션 동작
        // 멈췄을 때 즉, Float 값이 0 이면 0.01 보다 작으므로 Stand 애니메이션 동작 
        anime.SetFloat("Speed", inputVec.magnitude);

        // inputVec.x != 0 : 좌우 키를 눌렀을 때 만 변하도록 지정 
        if (inputVec.x != 0) {
            // inputVec.x 의 값이 0보다 작으면 즉, 왼쪽을 눌렀을 경우 true, flipX의 값이 True가 되기 때문에 방향 전환이 이루어짐 
            // inputVec.x 의 값이 0보다 크면 즉, 오른쪽을 눌렀을 경우 false, flipX의 값이 Falst가 되기 때문에 다시 원래의 방향으로 돌아옴 
            // Sprite Renderer의 속성이므로 컴포넌트를 불러와서 dool값을 지정 
            spriter.flipX = inputVec.x < 0;           // 방향 전환 ( 비교연산 값을 넣을 수 있다. ) 
        }
    }

    // 캐릭터 피격 로직 
    void OnCollisionStay2D(Collision2D collision)
    {
        // 캐릭터가 죽거나, 레벨업시 return으로 함수를 나간다. 
        if (!GameManager.instance.isLive) {
            return;
        }

        // 프레임 마다 체력이 감소되도록 하기 위해 Time.deltaTime을 곱해준다. 
        // 이렇게 하지 않으면 몬스터와 충돌 시 순식간에 체력이 감소되는 현상이 발생한다. 
        GameManager.instance.health -= Time.deltaTime * 10;

        // 플레이어 체력이 0보다 작아졌을 때 ( 죽었을 때 )
        if(GameManager.instance.health < 0) {
            // transform.childCount 자식의 개수를 가져오는 방법 
            for (int index = 2; index < transform.childCount; index++) {
                // GetChild() : 주어진 인덱스의 자식 오브젝트를 반환하는 함수 
                // 즉, 모든 자식 오브젝트를 비활성화 하는 로직 
                transform.GetChild(index).gameObject.SetActive(false);
            }
            // dead 애니메이션 동작 
            anime.SetTrigger("Dead");
            // GameManager의 GameOver() 함수 동작 
            GameManager.instance.GameOver();
        }
    }

}
