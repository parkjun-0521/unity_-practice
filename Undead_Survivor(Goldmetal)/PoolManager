using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PoolManager : MonoBehaviour
{
    // 변수와 리스드는 1대1 
    // .. 프리펩을 보관할 변수 ( 프리펩이 여러개일 수 있다. )
    public GameObject[] prefabs;

    // .. 풀 담당을 하는 리스트  ( 프리펩이 여러개일 수 있기 때문에 리스트도 여러개 존재 )
    List<GameObject>[] pools;

    void Awake()
    {
        // 프리펩의 개수만큼 리스트 초기화 ( 풀을 담당하는 리스트 초기화 )
        // 리스트 자체만 초기화를 진행한 것이다. ( 프리펩과 개수가 동일 하므로 프리펩의 개수만큼 초기화 )
        pools = new List<GameObject>[prefabs.Length];

        // 리스트의 내부 값을 전체적으로 초기화 
        for (int index = 0; index < pools.Length; index++) {
           // List의 각각의 모든 오브젝트 리스트 초기화 
           pools[index] = new List<GameObject>();
        }
    }

    // 오부젝트 풀링 
    // GameObject를 반환하는 함수 선언 
    public GameObject Get(int index)
    {
        // 지역 변수 생성 
        // 반환값 생성 
        GameObject select = null;

        // ... 선택한 풀의 놀고 (비활성화 된) 있는 게임오브젝트 접근 
        // 요청이 있을 떄 마다 프리펩을 SetActive(true) 로 생성한다. 
        foreach (GameObject item in pools[index]) {
            // 비활성화 된 오브젝트를 처리 
            if (!item.activeSelf) {
                // ... 발견하면 select 변수에 할당 
                select = item;
                select.SetActive(true);     // 비활성화 된 오브젝트를 활성화 
                break;
            }
        }

        // ... 못 찾았으면 (  select == null, null이면 false 다. )
        // 모든 풀이 사용중이면 새롭게 오브젝드를 생성해서 꺼내준다. 
        if (!select) {
            // ... 새롭게 생성해서 select 변수에 할당 
            select = Instantiate(prefabs[index], transform);        // 프리펩 생성 ( original 오브젝트, hierarchy 위치 )
            
            // 풀에 오브젝트를 추가 ( 오브젝트 생성 ) 
            pools[index].Add(select);

        }

        // GameOject를 반환
        return select;
    }
}
