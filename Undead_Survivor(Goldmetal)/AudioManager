using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/*
 * 게임에 관련된 모든 오디오를 관리하는 로직
 */

public class AudioManager : MonoBehaviour
{
    public static AudioManager instance;    // 정적 메모리에 담기 위해서 초기화 

    [Header("#BGM")]                        // 배경음악 관련 변수 
    public AudioClip bgmClip;               // 배경음악 ( 오디오 파일 드래그 드랍으로 초기화 ) 
    public float bgmVolume;                 // 볼륨 
    AudioSource bgmPlayer;                  // 오디오 소스 
    AudioHighPassFilter bgmEffect;          // AudioHighPassFilter : 지정한 주파수 대역의 소리만 나오도록 하기 위해 변수 선언 

    [Header("#SFX")]                        // 효과음 관련 변수 
    public AudioClip[] sfxClip;             // 여러 효과음 
    public float sfxVolume;                 // 효과음 볼륨
    AudioSource[] sfxPlayers;               // 여러 효과음 오디오 소스 
    public int channels;                    // 다양한 소리를 내가 위한 채널 시스템 ( 채널의 개수 ) 
    int channelIndex;                       // 채널의 index ( 몇번째 인지 확인하기 위한 변수 )

    // 효과음과 1:1로 대응하는 enum 데이터 선언 
    // LevelUp=3 : 숫자로 지정할 수 있다. 이렇게 되면 이루 Lose는 4번이 된다. 
    public enum Sfx { Dead, Hit, LevelUp=3, Lose, Melee, Range=7, Select, Win }
  
    void Awake()
    {
        instance = this;        // 내 자신으로 초기화 
        Init();                 // 변수 초기화 함수 
    }

    void Init()
    {
        // 배경음 플레이어 초기화 
        GameObject bgmObject = new GameObject("BgmPlayer");     // 게임 오브젝트 생성 ( BgmPlayer 라는 게임 오브젝트가 만들어짐 ) 
        bgmObject.transform.parent = transform;                 // 만든 게임오브젝트의 부모를 내 자신 오브젝트로 ( AudioManager가 부모, 만든 오브젝트가 자식 ) 
        bgmPlayer = bgmObject.AddComponent<AudioSource>();      // 오디오 소스 컴포넌트 생성 하고 저장 ( 만든 오브젝트에 AudioSource 컴포넌트 생성 ) 
        bgmPlayer.playOnAwake = false;                          // 시작할 때 바로 음악이 나오지 않도록 하기 위해 false
        bgmPlayer.loop = true;                                  // 음악을 반복하기 위해 loop를 true 
        bgmPlayer.volume = bgmVolume;                           // 볼륨 
        bgmPlayer.clip = bgmClip;                               // 오디오 파일 지정 

        bgmEffect = Camera.main.GetComponent<AudioHighPassFilter>();        // 대역폭 변수 초기화 

        // 효과음 플레이어 초기화 
        GameObject sfxObject = new GameObject("SfxPlayer");     // 효과음 게임 오브젝트 생성 ( SfxPlayer 라는 게임 오브젝트가 만들어짐 ) 
        sfxObject.transform.parent = transform;                 // 만든 게임오브젝트의 부모를 내 자신 오브젝트로 ( AudioManager가 부모, 만든 오브젝트가 자식 ) 
        sfxPlayers = new AudioSource[channels];                 // 오디오 소스 배열 초기화 ( 채널 개수 만큼 초기화 ) 

        // 오디오 소스 배열 하나씩 초기화 
        // sfxPlayers 길이만큼 순회 
        for (int index = 0; index < sfxPlayers.Length; index++) {
            sfxPlayers[index] = sfxObject.AddComponent<AudioSource>();      // 각 오브젝트에 AudioSource 생성 및 저장 ( 채널의 개수 만큼 생성 됨 ) 
            sfxPlayers[index].playOnAwake = false;                          // 시작할 때 바로 음악이 나오지 않도록 하기 위해 false
            sfxPlayers[index].bypassListenerEffects = true;                 // 배경음의 Audio High Pass Filter의 영향을 받지 않기 위해서 ByPass Listener Fffects를 true 로 지정한다. 
            sfxPlayers[index].volume = sfxVolume;                           // 볼륨 지정 
        }
    }

    // 배경음 
    public void PlayBgm(bool isPlay)
    {
        // bool 값에 따라 
        if (isPlay) {
            // 배경음 플레이 
            bgmPlayer.Play();
        }
        else {
            // 배경음 멈춤 
            bgmPlayer.Stop();
        }
    }

    public void EffectBgm(bool isPlay)
    {
        // 지정한 대역폭의 소리만 나올 수 있도록 하기위해 
        // 기본적으로 오브젝트를 false 해놓고 필요하면 true 하는 방식으로 구현 
        bgmEffect.enabled = isPlay;
    }

    // 효과음 
    public void PlaySfx(Sfx sfx)
    {
        // 효과음 출력 
        for (int index = 0; index < sfxPlayers.Length; index++){
            // 채널 개수 만큼 순회하도록 변수 생성 
            int loopIndex = (index + channelIndex) % sfxPlayers.Length;

            // 인덱스에 해당하는 오디오 소스를 가져온다. 
            // 지금 그 오디오 소스가 실행 중이면 for문을 넘어가라 ( 즉, 아래 로직을 실행하지 않고 다음 index로 넘어감 )  
            if (sfxPlayers[loopIndex].isPlaying) {
                continue;
            }
            // ! isPlaying 이여야 밑에 로직을 실행한다. 

            // Hit, Melee 은 클립이 두개 씩 있기 때문에 이것을 랜덤으로 실행 시키는 로직 
            int ranIndex = 0;
            if(sfx == Sfx.Hit || sfx == Sfx.Melee) {        // Hit 또는 Melee 일때 
                ranIndex = Random.Range(0, 2);
            }

            channelIndex = loopIndex;
            // Hit 또는 Melee 이 아니면 ranIndex는 0이므로 상관이 없다. 
            // Hit 또는 Melee 이면 각각 1 과 5를 반환할 것이다. 여기에 랜덤값 0 또는 1을 더하여 각각 2 와 6 의 소리가 랜덤으로 나오도록 하는 것이다. 
            sfxPlayers[loopIndex].clip = sfxClip[(int)sfx + ranIndex];      // 놀고 있는 오디오 소스 채널에 현재 선택된 오디오 클립을 적용 
            sfxPlayers[loopIndex].Play();                                   // 오디오 재생 

            // 효과음이 재생된 이후 break로 빠져나온다. ( continue 때문에 무한으로 재생될 수가 있다. ) 
            break;                                              
        }
    }
}
