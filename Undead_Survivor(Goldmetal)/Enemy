using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy : MonoBehaviour
{
    public float speed;                         // Enemy 속도 
    public float health;                        // Enemy 현재 체력 
    public float maxHealth;                     // Enemy 최대 체력 
    public RuntimeAnimatorController[] animCon; // 바뀌는 애니메이션을 가지고 있는 변수 ( 하나의 오브젝트가 여러 종류의 애니메이션을 가지고 있을 때 사용 )
    public Rigidbody2D target;                  // Enemy가 추적할 오브젝트 

    bool isLive;                                // Enemy 생존 여부 확인 변수

    Rigidbody2D rigid;                          // 이동을 위한 변수 선언 
    Collider2D coll;                            // 충돌을 제어하기 위해 Collider 변수 선언 

    Animator anim;                              // 애니메이션을 가져오기 위한 변수 
    SpriteRenderer spriter;                     // 회전을 위한 스프라이트

    // 코루틴의 yield return 값 변수화 
    WaitForFixedUpdate wait;                    // 다음 FixedUpdate() 가 될 떄 까지 기다리기 위한, 코루틴 return값 변수화 

    void Awake()
    {
        // 변수 초기화 
        rigid = GetComponent<Rigidbody2D>();
        coll = GetComponent<Collider2D>();          
        anim = GetComponent<Animator>();
        spriter = GetComponent<SpriteRenderer>();
        wait = new WaitForFixedUpdate();            
    }

    // 물리적인 행동이기 때문에 FixedUpdate()에서 로직을 구현 
    void FixedUpdate()
    {
        // 캐릭터가 죽거나, 게임 시간이 정지하였을 때 몬스터의 움직임을 제한하기 위해서 
        // 캐릭터의 isLive가 false이면 return
        if (!GameManager.instance.isLive)
            return;

        // 오브젝트의 isLive가 false 즉, 죽어있으면 아래 로직을 동작시키지 않는다. 
        // GetCurrentAnimatorStateInfo : 현재 상태의 정보를 가져오는 함수 ( anim.GetCurrentAnimatorStateInfo : 애니메이션의 현재 상태의 정보를 가져와라 ) 
        // 애니메이터 Layers를 Base Layer 하나만 쓰기 때문에 (0) 의 값을 넣어준 것 이다. ( 몇번째 Layer를 사용할 것인가 정수로 적어 주는 것 ) 
        // 0번째 애니메이터 즉, Base Layer의 애니메이터에서 Hit 애니메이션이 동작할 때는 return 값을 반환하여 밑의 로직을 실행하지 말아라 
        if (!isLive || anim.GetCurrentAnimatorStateInfo(0).IsName("Hit")) {
            return;
        }

        // 방향 구하기 
        // 방향 = 타겟의 위치 - 현재 나의 위치 
        Vector2 dirVec = target.position - rigid.position;

        // 이동할 다음 위치 구하기 
        // 방향이 필요한데 dirVec은 1이 아니므로 normalized를 사용하여 벡터의 방향만 구해준다. 
        // 위치 = 방향(normalized 사용) * 속도 * 프레임 ( 프레임과 상관없이 동일한 이동거리 이동을 위한 DeltaTime을 사용 )
        // FixedUpdate() 에서 작성하기 때문에 fixedDeltaTime를 사용한다. 
        // 이동할 위치는 방향에 속도를 곱한 것 
        Vector2 nextVec = dirVec.normalized * speed * Time.fixedDeltaTime;

        // 실제로 이동하기 위해서 = 현재 나의 위치 + 다음으로 이동할 위치   
        // MovePosition() : 순간이동 식으로 위치만 이동시키는 것이다. 
        rigid.MovePosition(rigid.position + nextVec);

        // 타겟과 충돌이 일어나면 부딧혔다가 약간의 힘으로 튕겨져 나간다. 
        // 그것을 막기 위해 타겟과 충돌하면 튕겨나가지 않도록 Vector2를 zero로 만들어 준다. 
        rigid.velocity = Vector2.zero;
    }

    // Update() 이후에 동작하는 로직 LateUpdate()
    // 오브젝트 회전 로직 
    void LateUpdate()
    {
        // 캐릭터가 죽거나, 게임 시간이 정지하였을 때 몬스터의 움직임을 제한하기 위해서 
        // 캐릭터의 isLive가 false이면 return
        if (!GameManager.instance.isLive)
            return;

        if (!isLive) {
            return;
        }

        // 오브젝트를 X축을 기준으로 회전시키는 로직 ( 기본적으로 왼쪽을 바라보고 있을때는 반대이다. )
        // 오브젝트가 오른쪽을 바라보고 있다고 하면 
        // 따라가는 타겟보다 왼쪽에 있으면 FlipX가 false 
        // 따라가는 타겟보다 오른쪽에 있으면 FlipX가 true 
        // 따라서 타겟의 X축 보다 나의 X축이 더 크면 오른쪽에 있다는 것이므로 true
        // 타겟의 X축 보다 나의 X축이 작으면 false 이다. 
        // 이것을 FlipX에 대입을 한다. 
        spriter.flipX = target.position.x < rigid.position.x;
    }

    // 생성되었을 때 초기화 
    // 활성화 되었을 떄 동작하는 함수 OnEnable() 
    void OnEnable()
    {
        // 프리펩은 생성되기 전에 Scene에 올라가 있는 오브젝트와는 상호작용을 할 수없다. 
        // 따라서 target의 변수에 Player가 할당 되지 않아 Player를 따라다니지 않게된다. 
        // 타겟을 Player로 지정하여 타겟을 따라다니도록 
        // 생성하면서 초기화 ( target이 Rigidbody2D 이기 때문에 Rigidbody2D로 초기화 )
        target = GameManager.instance.player.GetComponent<Rigidbody2D>();

        // 다시 생성되었기 때문에 OnTriggerEnter2D에서 죽었을 때 비활성화 했던 것들을 활성화 해주고 기본 값으로 다시 설정해 준다. 
        isLive = true;
        coll.enabled = true;
        rigid.simulated = true;
        spriter.sortingOrder = 2;
        anim.SetBool("Dead", false);

        // Enemy가 생성되었을 때 체력 최대 체력으로 초기화  
        health = maxHealth;
    }

    // 외부에서 데이터를 받아오기 위한 함수 
    public void Init(SpawnData data)
    {
        // Spawner 스크립트에서 data의 값을 받아온다. ( level에 따라서 data의 값이 변한다. ) 
        // SpawnData 클래스의 값으로 초기화 
        // 그 SpawnData 맞는 속성으로 Enemy를 초기화를 해준다. 

        // ex) Spawner 스크립트에서 level이 0이면 SpawnData[0] 의 값이 넘어오게된다. 
        // 그 0번은 Inspector에서 설정해준 SpawnData 값을 가지고 있다. 
        // 그 SpawnData 값으로 현재의 오브젝트를 초기화 해주는 것이 밑의 로직 4줄이다.

        anim.runtimeAnimatorController = animCon[data.spriteType];  // 애니메이션 초기화 ( 좀비 level=0, 스켈레톤 level=1 로 애니메이션배열 animCon에도 0번은 좀비, 1번은 스켈레톤 값이 들어가 있다. ) 
        speed = data.speed;                                         // 지정한 속도로 초기화 
        maxHealth = data.health;                                    // 지정한 최대 체력으로 초기화 
        health = data.health;                                       // 지정한 현재 체력으로 초기화 
    }

    // Player의 무기와 충돌 로직 구현
    // Collider과 직접적인 충돌이 아닌 Trigger 충돌 이벤트 
    void OnTriggerEnter2D(Collider2D collision)
    {
        // 충돌한 대상의 Tag가 Bullet이 아니면 return으로 값을 반환
        // 함수를 빠져 나간다. 
        if (!collision.CompareTag("Bullet") || !isLive) {
            return;
        }

        // 충돌한게 Bullet일 경우 아래 로직 동작 

        // Bullet 스크립트의 데미지를 가져와 Enemy의 health를 - 해준다. ( 피격 당했을 때 체력을 깍는 로직 )
        health -= collision.GetComponent<Bullet>().damage;

        // 코루틴을 실행하려면 StartCoroutine으로 실행한다. 
        StartCoroutine(KnockBack());

        if(health > 0) {
            // .. 살아있다.
            // Hit애니메이션 연결 ( Parameters 값이 Trigger인 Hit 애니메이션 )
            anim.SetTrigger("Hit");     

            // 오디오 
            AudioManager.instance.PlaySfx(AudioManager.Sfx.Hit);        // 효과음 실행 ( enum에서 값을 가져와 매개변수로 전달 )  
        }
        else {
            // .. 죽었을 때 
            isLive = false;             // Live bool 값을 false로 
            coll.enabled = false;       // collider로 비활성화 
            rigid.simulated = false;    // rigidbody 비활성화 ( rigidbody는 simulated로 비활성화 한다. ) 
            spriter.sortingOrder = 1;   // 죽고 나서 플레이어나 몬스터를 가리면 안되기 때문에 씬에서 아에 내려버리기 , Oeder를 배경보다 낮게 지정 
            anim.SetBool("Dead", true); // 죽는 애니메이션 동작 

            // 게임매니저의 로직을 동작 시킨다. 
            GameManager.instance.kill++;        // 킬 변수값 증가 
            GameManager.instance.GetExp();      // 경험치 증가 하면서 레벨업 함수 동작 

            // 오디오 ( 게임이 종료가 되었을 때는 나오지 않도록 한다. ) 
            if (GameManager.instance.isLive) {
                AudioManager.instance.PlaySfx(AudioManager.Sfx.Dead);   // 효과음 실행 ( enum에서 값을 가져와 매개변수로 전달 )  
            }
        }
    }

    // 앞에 I가 붙어 있으면 interface ( IEnumerator : 비동기로 동작하는 코루틴 ) 
    // Enemy가 Weapon에 충돌 했을 경우 넉백 구현 
    IEnumerator KnockBack()
    {
        // yield return null;                   // 1프레임
        // yield return new WaitForSeconds(2f); // 2초 딜레이
        yield return wait;  // 다음 물리 프레임 딜레이

        // Player의 위치 
        Vector3 playerPos = GameManager.instance.player.transform.position;

        // 나의 위치 - Player 위치 의 값을 구해서 방향을 구한다. ( 크기도 같이 구해진다. )
        Vector3 dirVec = transform.position - playerPos;

        // 뒤로 힘을 주어 넉백을 구현한다. 
        // normalized 로 단위벡터 즉, 크기를 1로 만든다. 
        // 순간적으로 힘을 주기 위해 ForceMode는 Impulse로 지정 
        rigid.AddForce(dirVec.normalized * 5f, ForceMode2D.Impulse);
    }

    // Dead는 애니메이션으로 구현을 하였다. ( 필기 확인 ) 
    void Dead()
    {
        // 죽었을 때 오브젝트 비활성화 
        gameObject.SetActive(false);
    }
}
