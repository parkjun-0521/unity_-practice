using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player_Move : MonoBehaviour
{
    // 변수 선언 
    int jumpCount = 0;
    bool jumpstop = false;
    public float jumpPower;
    public float maxSpeed;                                                                      // 최대 speed 지정 변수 
    Rigidbody2D rigid;                                                                          // Rigidbody2D 를 rigid 변수로 선언 
    SpriteRenderer spriteRenderer;                                                              // SpriteRenderer 를 spriteRenderer 변수로 선언     ==> bool형 이다. 따라서 True, False 값 이용
    Animator anima;                                                                             // Animator 를 animator 변수로 선언

    void Start()
    {
        // 변수 초기화 
        rigid = GetComponent<Rigidbody2D>();                                                    // rigid 변수로 GetComponent를 이용하여 Rigidbody2D를 호출 
        spriteRenderer = GetComponent<SpriteRenderer>();                                        // spriteRenderer 변수로 GetComponent를 이용하여 SpriteRenderer 호출
        anima = GetComponent<Animator>();                                                       // animator 변수로 Animator 이용하여 SpriteRenderer 호출
    }

    void Update()                                                                               // 1초에 60번 
    {
        // 점프 구현 
        if (Input.GetButtonDown("Jump")){
            if (jumpCount >= 0 && jumpstop == false)                                            
            {
                rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
                anima.SetBool("isJumping", true);                                               // 점프 후 isJumping 변수를 true 로 변환 ( 애니메이션 전환 ) 
                jumpCount++;                                                                    // 2단 점프를 위한 연산
                if (jumpCount == 2){                                                            // 점프를 두번 했을 시 
                    jumpstop = true;                                                            // jumpstop을 true 전환 하여 더 이상의 점프를 막음 
                }       
            }
        }

        // player 이동 멈춤 
        if (Input.GetButtonUp("Horizontal"))                                                     // 버튼을 땠을때 속도 감소                 
            rigid.velocity = new Vector2(rigid.velocity.normalized.x * 0.1f, rigid.velocity.y);  // 단위 벡터 ( 좌,우 이동 값이 -1,1이 된다. )  버튼을 땠을 때 속도를 0.5 or -0.5 로 감소시킨다. 

        // Player 보는 방향 전환 
        if (Input.GetButtonDown("Horizontal"))
            spriteRenderer.flipX = Input.GetAxisRaw("Horizontal") == -1;                         // -1 : 왼쪽 키, 0 : 양쪽 둘다, 1 : 오른쪽 키를 누를때 마다 flip이 켜진다.  다른 키를 눌렀을 때 flip이 꺼진다.

        // Plater 애니메이션 전환 
        if (Mathf.Abs(rigid.velocity.x) < 0.3)                                                   // Mathf.Abs란 => () 안의 값을 정대값으로 변환  // isWalking이라는 변수는 외부의 Animator에서 만든 변수
            anima.SetBool("isWalking", false);                                                   // 현재 속도 값이 0.3 보다 작으면 isWalking의 값을 false                                
        else
            anima.SetBool("isWalking", true);                                                    // 현재 속도 값이 0.3 보다 크면 isWalking의 값을 true
     
    }

    void FixedUpdate()                                                                                                   // 물리 기반 로직 관련                            
    {
        // 좌우 이동
        float h = Input.GetAxisRaw("Horizontal");                                                                         // h 변수에 GetAxisRaw로 Horizontal(좌, 우)를 호출 
        rigid.AddForce(Vector2.right * h, ForceMode2D.Impulse);                                                           // 실제로 이동하기 위한 로직

        // 최대 속도 
        if(rigid.velocity.x > maxSpeed)              // right MaxSpeed                                                     // 오른쪽으로 이동 할 때 스프라이트의 속도를 velocity로 가져 와서 maxSpeed와 비교 
            rigid.velocity = new Vector2(maxSpeed, rigid.velocity.y);                                                      // 현재 스프라이트의 속도를 x축은 maxSpeed로 y축은 현재의 y축 speed로 바꾼다.  
        else if (rigid.velocity.x < maxSpeed * (-1)) // left MaxSpeed                                                      // 왼쪽으로 갈 때는 방향이 음수이기 때문에 -1을 곱해준다. 
            rigid.velocity = new Vector2(maxSpeed * (-1), rigid.velocity.y);

        // Raw를 활용하여 오브젝트 판별 
        if (rigid.velocity.y < 0){
            Debug.DrawRay(rigid.position, Vector2.down, new Color(0, 1, 0));                                                // Ray를 그리기 
            RaycastHit2D rayHit = Physics2D.Raycast(rigid.position, Vector3.down, 1, LayerMask.GetMask("Platform"));        // ratHit 변수에 아래 방향으로 쏜 Ray 값을 넘긴다. ( Platform 이라는 LayerMask를 가진 오브젝트인지 확인 하기 위해 ) 
            if (rayHit.collider != null){                                                                                   // Ray가 Platform과 닿았을 때 
                if(rayHit.distance < 0.5f){                                                                                 // Ray의 거리가 0.5 보다 작다면 
                    Debug.Log(rayHit.collider.name);
                    anima.SetBool("isJumping", false);                                                                      // 애니메이션의 isJumping 변수를 false로 전환 ( 애니메이션 전환 )
                    jumpstop = false;                                                                                       // 착지 후 다시 점프하도록 점프 변수 초기화 
                    jumpCount = 0;                                                                                          // 2단 점프의 변수 초기화 
                }    
            }
        }



    }
}
