using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Node
{
    public GameObject ground;
    public bool walkable;
    public int gridX;
    public int gridY;

    // gridX gridY 2차원으로 구성된 공간의 위치를 저장할 변수 
    // ground node를 저장하고 있는 게임오브젝트 
    // walkable은 이동가능한지 판단하는 변수 
    public Node(GameObject ground, bool walkable, int gridX, int gridY)
    {
        ground = this.ground;
        walkable = this.walkable;
        gridX = this.gridX;
        gridY = this.gridY;
    }
}

================================================================================================
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Grid : MonoBehaviour
{
    public GameObject groundPrefab;     // 바닥을 이룰 게임오브젝트
    GameObject parentGrid;              // groundPrefab의 부모 
    public Vector2 gridWorldSize;       // 노드의 크기

    Node[,] grid;

    private void Start()
    {
        CreateGrid();
    }

    public void CreateGrid()
    {
        if(parentGrid != null){
            Destroy(parentGrid);
        }

        parentGrid = new GameObject("parentGrid");

        grid = new Node[(int)gridWorldSize.x, (int)gridWorldSize.y];

        Vector3 worldBottomLeft = Vector3.zero 
        - Vector3.right * gridWorldSize.x / 2 
        - Vector3.forward * gridWorldSize.y / 2;

        for(int x = 0; x < (int)gridWorldSize.x; x++){
            for(int y = 0; y < (int)gridWorldSize.y; y++){
                Vector3 worldPoint = worldBottomLeft + 
                Vector3.right * (x+0.5f) + 
                Vector3.forward * (y+0.5f);


                GameObject odj = Instantiate(groundPrefab, worldPoint, Quaternion.Euler(90,0,0));
                odj.transform.parent = parentGrid.transform;
                grid[x,y] = new Node(odj, true, x, y);
            }
        }
    }
}
