using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMove : MonoBehaviour
{
    public float jumpPower;             // 점프 높이 
    public float maxSpeed;              // 최대 이동 속도 변수 
    Rigidbody2D rigid;                  // Rigidbody2D 컴포넌트 변수 
    SpriteRenderer spriteRenderer;       // 방향 전환을 위해 스프라이트를 가져옴 
    Animator anime;                     // 애니메이션 변수 
    CapsuleCollider2D capsuleCollider;

    // 0:Jump, 1:Attack, 2:Damage, 3:Item, 4:Dead, 5:Finish
    public new AudioClip[] audio;
    AudioSource audioSource;

    void Awake()
    {
        rigid = GetComponent<Rigidbody2D>();                // Rigidbody2D 초기화 
        spriteRenderer = GetComponent<SpriteRenderer>();     // SpriteRenderer 초기화 
        anime = GetComponent<Animator>();                   // Animator 초기화 
        capsuleCollider = GetComponent<CapsuleCollider2D>();
        audioSource = GetComponent<AudioSource>();
    }

    void PlaySound(string action)
    {
        switch (action) {
            case "Jump":
                audioSource.clip = audio[0];
                break;
            case "Attack":
                audioSource.clip = audio[1];
                break;
            case "Damage":
                audioSource.clip = audio[2];
                break;
            case "Item":
                audioSource.clip = audio[3];
                break;
            case "Dead":
                audioSource.clip = audio[4];
                break;
            case "Finish":
                audioSource.clip = audio[5];
                break;
        }
        audioSource.Play();
    }

    void Update()
    {
        // 점프 
        // 점프 키를 누르고, 애니메이션의 isJump가 false일때 만 점프를 해라 
        if (Input.GetButtonDown("Jump") && !anime.GetBool("isJump")) {
            rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);

            // 점프 애니메이션 
            anime.SetBool("isJump", true);
            PlaySound("Jump");
        }

        // 이동 버튼을 땠을 때 속도 즉, 멈췄을 때 속도 
        if (Input.GetButtonUp("Horizontal")) {
            rigid.velocity = new Vector2(rigid.velocity.normalized.x * 0, rigid.velocity.y); 

            // Idel 애니메이션 동작 
            anime.SetBool("isWalk", false);
        }



        // 방향 전환 
        if (Input.GetButton("Horizontal")) {
            // Horizontal : 오른쪽:1, 왼쪽:-1 
            // 따라서 왼쪽일 경우 true가 되면서 flipX가 체크가 된다.
            spriteRenderer.flipX = Input.GetAxisRaw("Horizontal") == -1;

            // Work 애니메이션 동작 
            anime.SetBool("isWalk", true);
        }

        // 이동 애니메이션 ( 이렇게 만들수도 있다. ) 
        //if(Mathf.Abs(rigid.velocity.x) == 0)
        //    anime.SetBool("isWork", false);
        //else
        //    anime.SetBool("isWork", true);
    }

    void FixedUpdate()
    {
        // Horizontal (좌,우) 이동의 힘을 가지고 있는 변수 선언 
        float h = Input.GetAxisRaw("Horizontal");

        // 오른쪽으로 Horizontal 만큼의 힘을 준다. 
        rigid.AddForce(Vector2.right * h, ForceMode2D.Impulse);

        // 이동 로직이 AddForce 이므로 가속도를 받는다. 최대 속도를 지정해서 해당 속도를 넘지 않도록 한다. 
        if(rigid.velocity.x > maxSpeed) {
            rigid.velocity = new Vector2(maxSpeed, rigid.velocity.y);       // 오른쪽 이동 
        }
        else if (rigid.velocity.x < maxSpeed * -1) {
            rigid.velocity = new Vector2(maxSpeed * -1, rigid.velocity.y);  // 왼쪽 이동 
        }

        // Floor에 닿았는지 확인 
        // rigid.velocity.y < 0 즉, 플레이어가 아래로 내려가고 있을 때 
        if (rigid.velocity.y < 0) {
            // Ray를 그리기 ( Debug로 확인 ) 
            // 캐릭터의 rigid의 위치를 기준으로 아래로 그려라 
            Debug.DrawRay(rigid.position, Vector3.down, new Color(0, 0, 1));

            // Floor 라는 Layout에 닿았을 때만 반환을 하는 rayHit 
            RaycastHit2D rayHit = Physics2D.Raycast(rigid.position, Vector3.down, 1, LayerMask.GetMask("Floor"));

            // Floor에 충돌 했을 때 
            if (rayHit.collider != null) {
                // Ray의 거리가 0.5 보다 작을 때 점프애니메이션의 파라미터값을 false로 변경 
                if (rayHit.distance < 0.5f) 
                    anime.SetBool("isJump", false);
            }
        }
    }

    void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.gameObject.tag == "Enemy") {

            // 위에서 밟기 
            if (rigid.velocity.y < 0 && rigid.position.y > collision.transform.position.y) {
                OnAttack(collision.transform);
                PlaySound("Attack");
            }
            // 데미지를 입었을 때
            else {
                StartCoroutine(OnDamaged(collision.transform.position));
                PlaySound("Damage");
            }
        }
    }

    void OnAttack(Transform enemy)
    {
        GameManager.instance.stagePoint += 100;

        rigid.AddForce(Vector2.up * 2, ForceMode2D.Impulse);

        // Enemy 가 죽었을 때 
        EnemyMove enemyMove = enemy.GetComponent<EnemyMove>();
        enemyMove.StartCoroutine(enemyMove.OnDamaged());
    }

    // 플레이어가 데미지를 받았을 때
    IEnumerator OnDamaged(Vector2 targetPos)
    {
        // 체력 감소 
        GameManager.instance.HealthDown();

        // Player의 Layout을 10번으로 바꾼다. ( PlayerDamage로 바꿈 ) 
        gameObject.layer = 10;

        // 플레이어의 알파값을 약간 변경 
        spriteRenderer.color = new Color(1, 1, 1, 0.5f);

        anime.SetTrigger("doDamage");

        // 충돌 후 튕겨져 나가는 
        int dirc = transform.position.x - targetPos.x > 0 ? 1 : -1;
        rigid.AddForce(new Vector2(dirc, 1) * 7, ForceMode2D.Impulse);

        yield return new WaitForSeconds(1.5f);

        gameObject.layer = 9;

        spriteRenderer.color = new Color(1, 1, 1, 1);
    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        if(collision.gameObject.tag == "Item") {

            bool isBronze = collision.gameObject.name.Contains("Bronze");
            bool isSilver = collision.gameObject.name.Contains("Silver");
            bool isGold = collision.gameObject.name.Contains("Gold");

            if(isBronze)
                GameManager.instance.stagePoint += 50;
            else if(isSilver)
                GameManager.instance.stagePoint += 100;
            else if(isGold)
                GameManager.instance.stagePoint += 150;

            PlaySound("Item");

            // 오브젝트 비활성화
            collision.gameObject.SetActive(false);
        }
        else if(collision.gameObject.tag == "Finish") {
            // 다음 스테이지 
            PlaySound("Finish");
            GameManager.instance.NextStage();
        }
    }

    public void OnDead()
    {
        
        spriteRenderer.color = new Color(1, 1, 1, 0.5f);

        spriteRenderer.flipY = true;

        capsuleCollider.enabled = false;

        rigid.AddForce(Vector2.up * 5, ForceMode2D.Impulse);

        PlaySound("Dead");

    }

    public void VelocityZero()
    {
        rigid.velocity = Vector2.zero;
    }
}
