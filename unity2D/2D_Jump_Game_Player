// 2022-06-29
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Player_Move : MonoBehaviour
{
    // 변수 선언 
    public GameManager gameManager;                                  // 게임 매니저 변수 

    public AudioClip audioJump;                                      // 점프 사운드 
    public AudioClip audioAttack;                                    // 어택 사운드
    public AudioClip audioDamaged;                                   // 피격 사운드
    public AudioClip audioItem;                                      // 아이템 사운드
    public AudioClip audioDie;                                       // 죽음 사운드
    public AudioClip audioFinish;                                    // 스테이지 이동 사운드 

    int jumpCount = 0;                                               // 점프 횟수를 저장하는 변수 
    bool jumpstop = false;                                           // 2단 점프 변수 
    public float jumpPower;
    public float maxSpeed;                                           // 최대 speed 지정 변수 
    Rigidbody2D rigid;                                               // Rigidbody2D 를 rigid 변수로 선언 
    SpriteRenderer spriteRenderer;                                   // SpriteRenderer 를 spriteRenderer 변수로 선언     ==> bool형 이다. 따라서 True, False 값 이용
    Animator anima;                                                  // Animator 를 animator 변수로 선언
    CapsuleCollider2D capsuleCollider;                               // CapsuleCollider2D 를 capsuleCollider로 선언 
    AudioSource audioSource;                                         // AudioSource 를 audioSource 선언 

    void Start()
    {
        // 변수 초기화 
        rigid = GetComponent<Rigidbody2D>();                         // rigid 변수로 GetComponent를 이용하여 Rigidbody2D를 호출 
        spriteRenderer = GetComponent<SpriteRenderer>();             // spriteRenderer 변수로 GetComponent를 이용하여 SpriteRenderer 호출
        anima = GetComponent<Animator>();                            // animator 변수로 GetComponent 이용하여 Animator 호출
        capsuleCollider = GetComponent<CapsuleCollider2D>();         // capsuleCollider 변수로 GetComponent 이용하여 CapsuleCollider2D 호출
        audioSource = GetComponent<AudioSource>();                   // audioSource 변수로 GetComponent 이용하여 AudioSource 호출
    }
    
    void Sound(string action)                                       // 사운드 관련 함수 
    {
        switch (action){
            case "JUMP":
                audioSource.clip = audioJump;
                break;
            case "ATTACK":
                audioSource.clip = audioAttack;
                break;
            case "DAMAGED":
                audioSource.clip = audioDamaged;
                break;
            case "ITEM":
                audioSource.clip = audioItem;
                break;
            case "DIE":
                audioSource.clip = audioDie;
                break;
            case "FINISH":
                audioSource.clip = audioFinish;
                break;
        }
        audioSource.Play();                                     // 이걸 해줘야 소리가 작동 함 
    }

    void Update()                                                                                // 1초에 60번 
    {
        // 점프 구현 
        if (Input.GetButtonDown("Jump")){
            if (jumpCount >= 0 && jumpstop == false)                                            
            {
                rigid.AddForce(Vector2.up * jumpPower, ForceMode2D.Impulse);
                anima.SetBool("isJumping", true);                                               // 점프 후 isJumping 변수를 true 로 변환 ( 애니메이션 전환 ) 
                jumpCount++;                                                                    // 2단 점프를 위한 연산
                Sound("JUMP");                                                                  // 효과음 
                if (jumpCount == 2){                                                            // 점프를 두번 했을 시 
                    jumpstop = true;                                                            // jumpstop을 true 전환 하여 더 이상의 점프를 막음 
                }       
            }
        }

        // player 이동 멈춤 
        if (Input.GetButtonUp("Horizontal"))                                                     // 버튼을 땠을때 속도 감소                 
            rigid.velocity = new Vector2(rigid.velocity.normalized.x * 0.1f, rigid.velocity.y);  // 단위 벡터 ( 좌,우 이동 값이 -1,1이 된다. )  버튼을 땠을 때 속도를 0.5 or -0.5 로 감소시킨다. 

        // Player 보는 방향 전환 
        if (Input.GetButton("Horizontal"))
            spriteRenderer.flipX = Input.GetAxisRaw("Horizontal") == -1;                         // -1 : 왼쪽 키, 0 : 양쪽 둘다, 1 : 오른쪽 키를 누를때 마다 flip이 켜진다.  다른 키를 눌렀을 때 flip이 꺼진다.

        // Plater 애니메이션 전환 
        if (Mathf.Abs(rigid.velocity.x) < 0.3)                                                   // Mathf.Abs란 => () 안의 값을 정대값으로 변환  // isWalking이라는 변수는 외부의 Animator에서 만든 변수
            anima.SetBool("isWalking", false);                                                   // 현재 속도 값이 0.3 보다 작으면 isWalking의 값을 false                                
        else
            anima.SetBool("isWalking", true);                                                    // 현재 속도 값이 0.3 보다 크면 isWalking의 값을 true
     
    }

    void FixedUpdate()                                                          // 물리 기반 로직 관련                            
    {
        // 좌우 이동
        float h = Input.GetAxisRaw("Horizontal");                               // h 변수에 GetAxisRaw로 Horizontal(좌, 우)를 호출 
        rigid.AddForce(Vector2.right * h * 1.5f, ForceMode2D.Impulse);                 // 실제로 이동하기 위한 로직

        // 최대 속도 
        if(rigid.velocity.x > maxSpeed)              // right MaxSpeed          // 오른쪽으로 이동 할 때 스프라이트의 속도를 velocity로 가져 와서 maxSpeed와 비교 
            rigid.velocity = new Vector2(maxSpeed, rigid.velocity.y);           // 현재 스프라이트의 속도를 x축은 maxSpeed로 y축은 현재의 y축 speed로 바꾼다.  
        else if (rigid.velocity.x < maxSpeed * (-1)) // left MaxSpeed           // 왼쪽으로 갈 때는 방향이 음수이기 때문에 -1을 곱해준다. 
            rigid.velocity = new Vector2(maxSpeed * (-1), rigid.velocity.y);

        // Raw를 활용하여 오브젝트 판별 
        if (rigid.velocity.y < 0){
            Debug.DrawRay(rigid.position, Vector2.down, new Color(0, 1, 0));                                                // Ray를 그리기 
            RaycastHit2D rayHit = Physics2D.Raycast(rigid.position, Vector3.down, 1, LayerMask.GetMask("Platform"));        // ratHit 변수에 아래 방향으로 쏜 Ray 값을 넘긴다. ( Platform 이라는 LayerMask를 가진 오브젝트인지 확인 하기 위해 ) 
            if (rayHit.collider != null){                                                                                   // Ray가 Platform과 닿았을 때 
                if(rayHit.distance < 0.7f){                                                                                 // Ray의 거리가 0.5 보다 작다면 
                    Debug.Log(rayHit.collider.name);
                    anima.SetBool("isJumping", false);                                                                      // 애니메이션의 isJumping 변수를 false로 전환 ( 애니메이션 전환 )
                    jumpstop = false;                                                                                       // 착지 후 다시 점프하도록 점프 변수 초기화 
                    jumpCount = 0;                                                                                          // 2단 점프의 변수 초기화 
                }    
            }
        }

    }

    void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Item") {
            // 아이템 확인  
            bool isBronze = collision.gameObject.name.Contains("Bronze");               // 충돌한 오브젝트의 name에 Bronze 라는 값이 있습니까? 라고 묻고 반환 하는 거라고 생각 
            bool isSilver = collision.gameObject.name.Contains("Silver");               // 충돌한 오브젝트의 name에 Silver 라는 값이 있습니까? 라고 묻고 반환 하는 거라고 생각 
            bool isGold = collision.gameObject.name.Contains("Gold");                   // 충돌한 오브젝트의 name에 Gold 라는 값이 있습니까? 라고 묻고 반환 하는 거라고 생각 

            // 아이템을 먹었을때 올라가는 점수 
            if (isBronze)
                gameManager.stagePoint += 10;
            else if(isSilver)
                gameManager.stagePoint += 50;
            else if(isGold)
                gameManager.stagePoint += 100;

            // 효과음 
            Sound("ITEM");

            // 아이템 파괴
            collision.gameObject.SetActive(false);
        }
        else if (collision.gameObject.tag == "Finish"){
            // 다음 스테이지로 넘어가기 
            gameManager.NextStage();

            // 효과음 
            Sound("FINISH");
        }
    }

    void OnCollisionEnter2D(Collision2D collision)                      // 충돌 이벤트 생성 
    {
        if(collision.gameObject.tag == "Enemy"){
            // 위에서 몹을 밟는다.
            if (rigid.velocity.y < 0 && transform.position.y > collision.transform.position.y){     // player의 y의 가속도가 0보다 작아야하고 (=> 아래로 떨어지고 있어야 하고) ,  plyer의 y좌표가 충돌할 오브젝트보다 위에 있을 때 
                OnAttack(collision.transform);                                                      // 조건 만족시 충돌 이벤트 발생 
                gameManager.stagePoint += 50;                                                       // 점수 상승 
            }
            else{
                //Debug.Log("플레이어가 맞음 ");
                OnDamaged(collision.transform.position);                                            // 조건을 만족하지 않고 피격 당했을 때 함수 동작 

            }  
        }
    }

    void OnAttack(Transform enemy)                                   // 몹을 밟을 때 
    {

        // 효과음 
        Sound("ATTACK");

        // player 몹 밟을 시 살짝 이펙트 추가 
        rigid.AddForce(Vector2.up * 10, ForceMode2D.Impulse);       // 몹을 밟을 시 살짝 위로 점프 

        // 몹 죽음 
        Enemy_Move enmey_Move = enemy.GetComponent<Enemy_Move>();   // 외부에서 불러오기 위해 선언 
        enmey_Move.OnDamaged();                                     // 외부에서 함수를 불러온다.
    }

    void OnDamaged(Vector2 targetPos){                              // 피격을 받았을 때 

        // 체력 감소 
        gameManager.HealthDown();

        // 플레이어 layer를 playerdamaged로 변경 
        gameObject.layer = 11;

        // 플레이어 충돌시 색 변경 
        spriteRenderer.color = new Color(1, 1, 1, 0.4f);                    // Color의 4번째 값은 투명도를 의미 

        // 튕겨나가는 모션 
        int dirc = transform.position.x - targetPos.x > 0 ? 1 : -1;         
        rigid.AddForce(new Vector2(dirc*10, 1) * 10, ForceMode2D.Impulse);

        // 애니메이션
        anima.SetTrigger("Damaged");

        // 효과음 
        Sound("DAMAGED");

        // 충돌 후 원래 상태로 돌아는 함수 
        Invoke("OffDamaged", 2);

    }

    void OffDamaged()                                                // 충돌 후 원상 복귀 
    {
        // 플레이어 layer를 playerdamaged로 변경 
        gameObject.layer = 10;

        // 플레이어 충돌시 색 변경 
        spriteRenderer.color = new Color(1, 1, 1, 1);                // Color의 4번째 값은 투명도를 의미 

    }
    public void OnDeath()
    {
        // Player 색 변경
        spriteRenderer.color = new Color(1, 1, 1, 0.4f);

        // 효과음 
        Sound("DIE");

        // Player 상하 반전 
        spriteRenderer.flipY = true;

        // Player 비활성화 
        capsuleCollider.enabled = false;

        // Player 이펙트 
        rigid.AddForce(Vector2.up * 5, ForceMode2D.Impulse);
    }

    public void VelocityZero(){                 // 떨어지고 난 후 가속도를 0으로 초기화 
        rigid.velocity = Vector2.zero;
    }
}

